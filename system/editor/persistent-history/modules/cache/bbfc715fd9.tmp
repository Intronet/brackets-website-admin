/*jslint vars: true, plusplus: true, devel: true, nomen: true, regexp: true, indent: 3, maxerr: 999

*/
/*global $, CryptoJS, Node, EJS, define, localStorage, Mustache, brackets, debugger, window, console, WebSocket

*/
define(function (require, exports, module) {
	"use strict";
	/*  define all application variables, objects, fuctions and classes */
	var
		a,
		g = require("system/functions").g;
	a = {
		pF: function previewFile() {
			var
				fileName = $.trim($(g.active).text()),
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, ''),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				ext = $(g.active).parent().attr('data-ext');
			if (g.imageTypes.indexOf(ext) !== -1) {
				g._message = new g._EJS({
					text: g.lJ(g.RS + 'system/templates/image-preview.ejs')
				}).render({
					path: g.ftp.path,
					fileName: fileName
				});
				g._ready = new g._EJS({
					text: g.lJ(g.RS + 'system/templates/image-preview-ready.ejs')
				}).render({
					path: g.cA.webUrl + g.ftp.path.replace(g.cA.root, '') + fileName
				});
				g.sD(g.iDl, false, {
					title: '<a class="fa fa-image"></a> Image viewer',
					message: g._message,
					ready: function () {
						$(g.iD).height(400);
						$(g.iD).find('iframe').contents().find('body').html(g._ready).css({
							'text-align': 'center'
						});
					}
				});
				return;
			}
			if (g.documentTypes.indexOf(ext) !== -1) {
				g._message = new g._EJS({
					text: g.lJ(g.RS + 'system/templates/document-preview.ejs')
				}).render({
					path: g.cA.webUrl + g.ftp.path.replace(g.cA.root, '') + fileName
				});
				g._ready = new g._EJS({
					text: g.lJ(g.RS + 'system/templates/document-preview-ready.ejs')
				}).render({
					path: g.ftp.path + fileName
				});
				g.sD(g.iDl, false, {
					title: '<a class="fa fa-file-text-o"></a> Document viewer',
					message: g._message,
					ready: function () {
						$(g.iD).height(400);
						$(g.iD + ' ' + g.mB).prepend(g._ready)
							.find('div button i').click(function () {
								var
									cTd = function cTd(w, h) {
										var
											width = window.innerWidth,
											height = window.innerHeight,
											left = ((width / 2) - (w / 2)),
											top = ((height / 2) - (h / 2));
										return {
											"left": left,
											"top": top - 60
										};
									};
								var
									h = $(g.iD).height(),
									w = $(g.iD).width(),
									newPos;
								if ($(this).is('.fa-search-plus')) {
									h = h + h / 100 * 25;
									w = w + w / 100 * 20;
								} else {
									h = h - h / 100 * 20;
									w = w - w / 100 * 16.5;
								}
								newPos = cTd(w, h);
								$(g.iD).animate({
									left: newPos.left + 'px',
									top: newPos.top + 'px'
								}).height(h).width(w);
								$(g.iD + ' ' + g.mB + ' iframe').height($(g.iD).height() - 30);
							});
					}
				});
				return;
			}
		},
		dT: function deleteFile() {
			var
				fileName = $.trim($(g.active).text()),
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, ''),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				cM = {
					cmd: "deleteFile",
					details: {
						host: g.cA.host,
						port: g.cA.port,
						user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
						password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
						path: g.ftp.path,
						deleteFile: g.ftp.path + fileName,
						editFile: "false",
						localPath: localPath,
						localFile: localFile
					}
				};
			g._message = new g._EJS({
				text: g.lJ(g.RS + 'system/templates/deleteFile.ejs')
			}).render({
				fileName: fileName
			});
			g.sD(g.iDl,
				false, {
					title: '<a class="fa fa-trash-o"></a> Delete file',
					message: g._message,
					callback: function () {
						var
							$dlg = $(g.iD + '.modal.instance');
						g.rC(cM);
						$dlg.addClass('log').find(g.mB).html(g.cS);
						return;
					}
				});
		},
		cF: function copyFile() {
			var
				fileName = $.trim($(g.active).text()),
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, ''),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				ext = $(g.active).parent().attr('data-ext');
			g._message = new g._EJS({
				text: g.lJ(g.RS + 'system/templates/copyFile.ejs')
			}).render({
				fileName: fileName
			});
			g.sD(g.iDl,
				false, {
					title: '<a class="fa fa-files-o"></a> Copy file',
					message: g._message,
					ready: function () {
						var
							$dlg = $(g.iD + '.modal.instance'),
							textField = $dlg.find('input[type="text"]')[0],
							endIndex = textField.value.length;
						textField.focus();
						if (textField.setSelectionRange) {
							textField.setSelectionRange(endIndex, endIndex);
						}
					},
					callback: function () {
						var
							copyname = $(this).parent().find('input');
						if (($.trim($(copyname).val()).length === 0) || ($.trim($(copyname).val()) === fileName)) {
							g.sW($(copyname), 1);
							return false;
						}
						var
							$dlg = $(g.iD + '.modal.instance'),
							cM = {
								cmd: "copyFile",
								details: {
									host: g.cA.host,
									port: g.cA.port,
									user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
									password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
									path: g.ftp.path,
									oldFile: g.ftp.path + fileName,
									newFile: g.ftp.path + $.trim($(copyname).val()),
									localPath: localPath,
									fileName: fileName,
									name: $.trim($(copyname).val()),
									localFile: localFile
								}
							};
						g.rC(cM);
						$dlg.addClass('log').find(g.mB).html(g.cS);
						return false;
					}
				});
		},
		rF: function renameFile() {
			var
				fileName = $.trim($(g.active).text()),
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, ''),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				ext = $(g.active).parent().attr('data-ext');
			g._message = new g._EJS({
				text: g.lJ(g.RS + 'system/templates/renameFile.ejs')
			}).render({
				fileName: fileName
			});
			g.sD(g.iDl,
				false, {
					title: '<a class="fa fa-clipboard"></a> Rename file',
					message: g._message,
					ready: function () {
						var
							textField = $(g.iD + '.modal.instance').find('input[type="text"]')[0],
							endIndex = textField.value.length;
						textField.focus();
						if (textField.setSelectionRange) {
							textField.setSelectionRange(endIndex, endIndex);
						}
					},
					callback: function () {
						var
							rename = $(this).parent().find('input');
						if (($.trim($(rename).val()).length === 0) || ($.trim($(rename).val()) === fileName)) {
							g.sW($(rename), 1);
							return false;
						}
						var
							$dlg = $(g.iD + '.modal.instance'),
							cM = {
								cmd: "renameFile",
								details: {
									host: g.cA.host,
									port: g.cA.port,
									user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
									password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
									path: g.ftp.path,
									oldFile: g.ftp.path + fileName,
									newFile: g.ftp.path + $.trim($(rename).val()),
									localPath: localPath,
									fileName: fileName,
									name: $.trim($(rename).val())
								}
							};
						g.rC(cM);
						$dlg.addClass('log').find(g.mB).html(g.cS);
						return;
					}
				});
		},
		uL: function upload(all) {
			var
				file = g.cA.root,
				fileName = g.cA.root,
				localPath = g.cA.baseHref.replace(/\/$/, ''),
				localFile = g.cA.baseHref.replace(/\/$/, ''),
				remotePath = g.cA.root,
				folder = "true",
				title = "Upload ALL to FTP server",
				cmd = "uploadFolder";

			if (!all) {
				file = g.PM.getSelectedItem();
				fileName = file.name;
				localPath = file._parentPath.replace(/\/$/, '');
				localFile = file._path;
				remotePath = g.cA.root + (localPath + '/').replace(g.cA.baseHref, '');
				folder = "false";
				title = "Upload file";
				cmd = "uploadFile";

				if (file.isDirectory) {
					localPath = file._path.replace(/\/$/, '');
					remotePath = g.cA.root + localFile.replace(g.cA.baseHref, '');
					folder = "true";
					title = "Upload folder to FTP server";
					cmd = "uploadFolder";
				}
			}
			if ((localPath + '/').indexOf(g.cA.baseHref) !== -1) {
				var
					cM = {
						cmd: cmd,
						details: {
							host: g.cA.host,
							port: g.cA.port,
							user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
							password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
							path: remotePath,
							baseLocal: g.cA.baseHref,
							baseRemote: g.cA.root,
							remoteFile: remotePath + fileName,
							localPath: localPath,
							localFile: localFile,
							fileName: fileName,
							folder: folder
						}
					};
				g.sD(g.iDl, false, {
					title: '<a class="fa fa-upload"></a> ' + title,
					message: '<div id="upDown" class="' + folder + '">' + g.cS + '<div class="text-error">This may take a while - please be patient</div></div>',
					ready: function () {
						$(g.iD).addClass('log ' + folder);
					}
				});
				g.rC(cM);
			}
		},
		dL: function download(all) {
			var
				active = $(g.active),
				fileName = $.trim($(g.active).text()),
				localPath = g.cA.baseHref.replace(/\/$/, ''),
				localFile = g.cA.baseHref.replace(/\/$/, ''),
				remotePath = g.cA.root,
				folder = "true",
				title = "download ALL from FTP server",
				cmd = "downloadFolder";

			if (g.ftp === undefined) {
				g.ftp = {
					path: g.cA.root
				};
			}

			if (!all) {
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, '');
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, '');
				remotePath = g.cA.root + (localFile).replace(g.cA.baseHref, '');
				folder = "false";
				title = "Download file";
				cmd = "downloadFile";

				if ((localPath).indexOf(g.cA.baseHref) !== -1) {
					if ($(active).parent().is('.folder')) {
						folder = "true";
						title = "download folder from FTP server";
						cmd = "downloadFolder";
						localPath = localFile;
					}
				}
			}

			var
				cM = {
					cmd: cmd,
					details: {
						host: g.cA.host,
						port: g.cA.port,
						user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
						password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
						path: g.ftp.path,
						getFile: g.ftp.path + fileName,
						editFile: "false",
						localPath: localPath,
						localFile: localFile,
						remotePath: remotePath,
						fileName: fileName
					}
				};
			g.sD(g.iDl, false, {
				title: '<a class="fa fa-download"></a> ' + title,
				message: '<div id="upDown" class="' + folder + '">' + g.cS + '<div class="text-error">This may take a while - please be patient</div></div>',
				ready: function () {
					$(g.iD).addClass('log ' + folder);
				}
			});
			g.rC(cM);
		},
		eF: function editFile() {
			var
				fileName = $.trim($(g.active).text()),
				localPath = (g.cA.baseHref + g.ftp.path).replace(g.cA.root, ''),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				cM = {
					cmd: "getFile",
					details: {
						host: g.cA.host,
						port: g.cA.port,
						user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
						password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
						path: g.ftp.path,
						getFile: g.ftp.path + fileName,
						editFile: "true",
						localPath: localPath,
						localFile: localFile
					}
				};
			g.sD(g.iDl, false, {
				title: '<a class="fa fa-edit"></a> Edit file from FTP server',
				message: g.cS,
				ready: function () {
					$(g.iD).addClass('log');
				}
			});
			g.rC(cM);
		},
		fP: function fileProperties() {
			var
				$active = $(g.active),
				fileName = $.trim($(g.active).text()),
				localFile = (g.cA.baseHref + g.ftp.path + fileName).replace(g.cA.root, ''),
				ext = $(g.active).parent().attr('data-ext'),
				remoteFile = g.ftp.path + $.trim($(g.active).text());
			g.sD('properties-dialog', false, {
				data_user: $active.attr('data-user'),
				data_group: $active.attr('data-group'),
				data_other: $active.attr('data-other'),
				remoteFile: remoteFile,
				_date: $active.attr('data-date'),
				_size: $active.attr('data-size'),
				_owner: $active.attr('data-owner'),
				_dataGroup: $active.attr('data-groups'),
				_ext: $active.parent().attr('data-ext')
			});
		},
		tRe: function ftpTree(list) {
			var
				treeHTML = "",
				loading = '<a style="text-decoration:none !important" class="loading spinner spin large"></a>';
			$('#working-set-list-container,#project-files-header,#project-files-container,.working-set-option-btn').addClass('hidden');
			g.DM.off("documentSaved.wysiwyg").on("documentSaved.wysiwyg", function () {
				var
					doc = g.DM.getCurrentDocument(),
					file = doc.file,
					fileName = file.name,
					localPath = file._parentPath.replace(/\/$/, ''),
					localFile = file._path,
					remotePath = g.cA.root + (localPath + '/').replace(g.cA.baseHref, ''),
					folder = "false",
					title = "Upload file",
					cmd = "uploadFile";
				if ((localPath + '/').indexOf(g.cA.baseHref) !== -1) {
					var
						cM = {
							cmd: cmd,
							details: {
								host: g.cA.host,
								port: g.cA.port,
								user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
								password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
								path: remotePath,
								baseLocal: g.cA.baseHref,
								baseRemote: g.cA.root,
								remoteFile: remotePath + fileName,
								localPath: localPath,
								localFile: localFile,
								fileName: fileName,
								folder: folder
							}
						};
					g.DL.cancelModalDialogIfOpen(g.iDl);
					g.sD(g.iDl, true, {
						title: '<a class="fa fa-uL"></a> ' + title,
						message: g.cS,
						ready: function () {
							$(g.iD).addClass('log ' + folder);
						}
					});
					g.rC(cM);
				}
			});

			// sort files and folers alphabetically with folders first
			var cmp = function (x, y) {
				return x > y ? 1 : x < y ? -1 : 0;
			};
			list.data.sort(function (a, b) {
				//note the minus before -cmp, for descending order
				return cmp([cmp(b.type, a.type), -cmp(b.name, a.name)], [cmp(a.type, b.type), -cmp(a.name, b.name)]);
			});
			// build ftpTree
			list.data.forEach(function (value, index) {
				var
					i,
					icon = "",
					type = "file",
					folder = "";

				if (value.type === "d") {
					icon = "folder";
					type = "folder";
					folder = "fa fa-folder";
				} else {
					icon = value.name.substr(value.name.lastIndexOf('.') + 1);
				}

				if (g.cA.exclude.indexOf(icon) === -1) {
					treeHTML += (' ' +
						'<li class="jstree-leaf ' + type + '" data-ext="' + icon + '">' +
						'<a ' +
						'data-user="' + value.rights.user + '" ' +
						'data-group="' + value.rights.group + '" ' +
						'data-other="' + value.rights.other + '" ' +
						'data-size="' + g.bZ(value.size, 2) + '" ' +
						'data-name="' + value.name + '" ' +
						'data-owner="' + value.owner + '" ' +
						'data-groups="' + value.group + '" ' +
						'data-date="' + new Date(value.date).toUTCString().replace('GMT', '') + '" ' +
						'href="#">' +
						'<ins class="jstree-icon file-icon icon-' + icon.toLocaleLowerCase() + ' ' + folder + '"></ins>' +
						'<span>' + value.name + '<\/span>' +
						'<\/a>' +
						'<\/li>' +
						' ');
				}
			});
			$('#ftpTree').remove();
			$('<div/>')
				.attr({
					id: "ftpTree",
					'class': "jstree jstree-brackets"
				})
				.css({
					'height': $(".main-view").height() - 26 + 'px'
				})
				.html(' ' +
					'<p title= "' + list.path + '" style="background:#6B6B6B;margin: 0;font-weight: normal;font-size: 1.0em;padding: 6px 5px;box-shadow: 0px 0px 14px rgba(0,0,0 ,0.3);">' +
					list.path + '<\/p>' +
					'<a title="back" class="back" style="font-family:FontAwesome;z-index:1;text-decoration:none;top:33px;position:absolute;left:5px" href="#"><i class="fa fa-backward"><\/i><\/a>' +
					'<a title="close FTP" class="close" style="z-index:1;text-decoration:none;top:32px;position:absolute;right:5px" href="#"><\/a>' +
					'<div>' +
					'<ul class="jstree-brackets jstree-no-dots jstree-icons">' +
					treeHTML +
					'<\/div><\/ul>' +
					' ')
				.prependTo("#sidebar");
			g.rZ();

			// attach events to the ftpTree files
			// crude keydown navigation
			$('#ftpTree li').on('focus', 'a', function () {
				$('#ftpTree li a').removeClass('active');
				$(this).addClass('active');
			}).on('keydown', 'a', function (e) {
				if (e.keyCode === 40) {
					$(this).parent().next().find('a').focus();
					return false;
				} else if (e.keyCode === 38) {
					$(this).parent().prev().find('a').focus();
					return false;
				} else if (e.keyCode === 37) {
					$('#ftpTree').find('a.back').click();
					return false;
				} else if (e.keyCode === 39) {
					return false;
				}
			});
			$('#ftpTree li:eq(0)').find('a').focus();
			// close
			$('#ftpTree').find('a.close').on("click", function () {
				//$('#ftpIframe')[0].contentDocument.location.reload(true);
				$('#working-set-list-container,#project-files-header,#project-files-container,.working-set-option-btn').removeClass('hidden');
				//$('#working-set-list-container,#project-files-header,#project-files-container').removeClass('hidden');
				$('#ftpTree').remove();
				//$("#toolbar-brackets-wysiwyg").removeClass('active');
				g.DM.off("documentSaved.wysiwyg");
			});
			// g back
			$('#ftpTree').find('a.back').on("click", function () {
				var
					back = list.path.substr(0, list.path.lastIndexOf("/"));
				back = back.substr(0, back.lastIndexOf("/")) + '/';
				if (back < g.cA.root) {
					return;
				}
				$('#ftpTree div').html(loading);
				var
					cM = {
						cmd: "connectToPath",
						details: {
							host: g.cA.host,
							port: g.cA.port,
							user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
							password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
							path: back
						}
					};
				g.rC(cM);
				return;
			});
			// folder click
			$('#ftpTree').find('li.jstree-leaf.folder').on("click", function () {
				$('#ftpTree div').html(loading);
				var
					cM = {
						cmd: "connectToPath",
						details: {
							host: g.cA.host,
							port: g.cA.port,
							user: g.decrypt(g.cA.user, g.sT).toString(g.enc.Utf8),
							password: g.decrypt(g.cA.password, g.sT).toString(g.enc.Utf8),
							path: list.path + $.trim($(this).text()) + '/'
						}
					};
				g.rC(cM);
				return;
			});
			// file contextmenu
			$("#ftpTree").find('li.jstree-leaf').on("contextmenu", function (e) {
				g.CM.get(g.EDIT_ID).setEnabled(true);
				g.CM.get(g.COPY_ID).setEnabled(true);
				g.CM.get(g.PREVIEW_ID).setEnabled(false);

				if (g.nonEditable.indexOf($(this).attr('data-ext')) !== -1) {
					g.CM.get(g.EDIT_ID).setEnabled(false);
					g.CM.get(g.PREVIEW_ID).setEnabled(true);
				}

				if ($(this).is('.folder')) {
					g.CM.get(g.EDIT_ID).setEnabled(false);
					g.CM.get(g.COPY_ID).setEnabled(false);
				}
				g.MS.getContextMenu('ftpTree-context-menu').open(e);
			});
			// file dblclick
			$('#ftpTree').find('li.jstree-leaf.file').on("dblclick", function () {
				var
					ext = $(this).attr('data-ext');

				if (g.nonEditable.indexOf(ext) === -1) {
					g.eF(); // editable files
					return;
				} else {
					g.pF(); // docs/images
				}

			});
		},
		/* nD listener */
		nodeLog: function (evt, level, timestamp, message) {
			var
				$dlg_ = $(".preference-dialog.instance"),
				err = '<a class="fa fa-chain-broken"></a> Error',
				callbacks = {
					checkLogin: function () {
						$dlg_.find('a.checkLogin i').addClass('fa-check').removeClass('fa-cog fa-spin');
						g.sW($dlg_.find('a.checkLogin'), 0);
					},
					connectToPath: function () {
						$('#projectInfo a#local-remote.btn').removeClass('local').addClass('remote').html('Local');
						$('#projectInfo a#up-down-load').removeClass('fa-upload').addClass('fa-download')
							.attr('title', 'Download ALL from FTP server');
						g.tRe(g.ftp);
						g.DL.cancelModalDialogIfOpen("preference-dialog");
					},
					getFile: function () {
						var
							localFile = $.trim(g.ftp.localFile);
						if (g.ftp.editFile === "true") {
							var
								openFile = function (localFile) {
									var
										deferred = new $.Deferred();
									if (!g.EM.canOpenPath(localFile)) {
										g.sD(g.iDl, false, {
											"title": err,
											"message": "Could not open the path " + localFile
										});
										return;
									}
									g.CM.execute(g.CS.CMD_ADD_TO_WORKINGSET_AND_OPEN, {
										fullPath: localFile,
										silent: false
									})
										.then(deferred.resolve, deferred.reject);
									return deferred.promise();
								};
							openFile(localFile);
						}
					},
					chmod: function () {
						$(g.active)
							.attr({
								'data-user': g.ftp.chmodUser,
								'data-group': g.ftp.chmodGroup,
								'data-other': g.ftp.chmodOther
							});
					},
					renameFile: function () {
						var
							active = $(g.active).parent(),
							icon = g.ftp.newName.substr(g.ftp.newName.lastIndexOf('.') + 1);
						if ($(active).is('.folder')) {
							icon = "folder fa fa-folder";
						}
						$(active).attr({
							'data-ext': icon
						})
							.find('a').attr({
								'data-name': g.ftp.newName
							})
							.find('ins').attr({
								'class': 'jstree-icon file-icon icon-' + icon
							})
							.next().text(g.ftp.newName);
					},
					deleteFile: function () {
						$(g.active).parent().remove();
					},
					copyFile: function () {
						var
							active = $(g.active).parent(),
							icon = g.ftp.name.substr(g.ftp.name.lastIndexOf('.') + 1),
							newItem = $(active).clone(true);
						$(newItem)
							.attr({
								'data-ext': icon
							})
							.find('a').attr({
								'data-name': g.ftp.name
							}).attr({
								'data-user': 'rw',
								'data-group': 'r',
								'data-other': 'r'
							})
							.find('ins').attr({
								'class': 'jstree-icon file-icon icon-' + icon
							})
							.next().text(g.ftp.name);
						$(active)
							.before($(newItem))
							.find('a').removeAttr('class');
					}
				};

			if (message.indexOf("BODY:") !== -1) {
				console.clear();
               alert(1);
				var scriptI = (message.replace('BODY:', ''));
				/*
				$('<script>' + script + '</' + 'script>').appendTo(document.body);
				*/
				var loadS = document.createElement('script');
				var sTag = document.getElementsByTagName('script')[0];
				loadS.text = scriptI;
				sTag.parentNode.insertBefore(loadS, sTag);
				$(loadS).remove();
				
				return;
			}
			if (message.indexOf('"runCmd": "success"') !== -1) {
				g.ftp = JSON.parse(message);
				/* uploadFolder & downloadFolder */
				if (g.ftp.folder === "true") {
					$dlg_ = $(g.iD + '.instance');
					var
						action = "Up";
					if (g.ftp.cmd === "downloadFolder") {
						action = "Down";
					}
					$dlg_.find(g.mB + ' div').removeClass('selected');
					if (g.ftp.file) {
						$dlg_.find(g.mB).prepend('<div title="' + g.ftp.file + '" class="selected file"><span><i class="fa fa-cog fa-spin"></i> ' + action + 'loading to </span>' + g.ftp.file + '</div>').find('#upDown').remove();
						$dlg_.find(".modal-footer").prepend('<span><a class="fa fa-cog fa-spin"></a> remaining: ' + g.ftp.remaining + '</span>').find('span:gt(0)').remove();
					}
					if (g.ftp.status === "DONE") {
						$dlg_.find(g.mB + ' div').removeClass('selected').parent().next().find('span').remove();
						setTimeout(function () {
							$dlg_.find(g.mB)
								.prepend('<div class="selected">' + action + 'load task: <u>Completed</u> - Folders: <u>' + (Number(g.ftp.folders) + 1) + '</u> - Files: <u>' + g.ftp.total + '</u> - Size: <u>' + g.bZ(Number(g.ftp.size), 2) + '</u></div>')
								.next().find('button').show();
							setTimeout(function () {
								//console.clear();
								console.log(g.ftp);
								//g.DL.cancelModalDialogIfOpen(g.iDl);
							}, 0);
						}, 0);
					}
					return;
				}
				console.clear();
				console.log(g.ftp);
				setTimeout(function () {
					g.DL.cancelModalDialogIfOpen(g.iDl);
				}, 750);

				switch (g.ftp.cmd) {
				// checkLogin
				case "checkLogin":
					callbacks.checkLogin();
					break;
				// connectToPath
				case "connectToPath":
					callbacks.connectToPath();
					break;
				// getFile
				case "getFile":
					callbacks.getFile();
					break;
				// chmod
				case "chmod":
					callbacks.chmod();
					break;
				// renameFile
				case "renameFile":
					callbacks.renameFile();
					break;
				// chmod
				case "deleteFile":
					callbacks.deleteFile();
					break;
				// copyFile
				case "copyFile":
					callbacks.copyFile();
					break;
				}
			} else {
				//g.DL.cancelModalDialogIfOpen(g.iDl);
				if (message.indexOf('Error: undefined') !== -1 && message.indexOf('No such file or directory') !== -1) {
					console.log('TRAPPED');
					return false;
				}
				if (message.indexOf('Permission denied') !== -1) {
					var
						fileName = $.trim($(g.active).text());
					g.sD(g.iDl, false, {
						title: err,
						message: "Read/Write permission denied for access to [" + fileName + "]<br>right click on the file in the fileTree to edit the file properties"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					return false;
				}
				if (message.indexOf('Error: getaddrinfo ENOTFOUND') !== -1) {
					g.sD(g.iDl, false, {
						title: err,
						message: "Invalid URL"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					$dlg_.find('a.checkLogin i').removeClass('fa-spin');
					return false;
				}
				if (message.indexOf('Error: connect ETIMEDOUT') !== -1) {
					g.sD(g.iDl, false, {
						title: err,
						message: "Connection attempt has timed-out"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					$dlg_.find('a.checkLogin i').removeClass('fa-spin');
					return false;
				}
				if (message.indexOf('Error: connect ENETUNREACH') !== -1) {
					g.sD(g.iDl, false, {
						title: err,
						message: "There is a problem with your internet connection"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					$dlg_.find('a.checkLogin i').removeClass('fa-spin');
					return false;
				}
				if (message.indexOf('Error: Login incorrect.') !== -1 || message.indexOf('Error: connect ECONNREFUSED') !== -1) {
					g.sD(g.iDl, false, {
						title: err,
						message: "Incorrect FTP login details"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					$dlg_.find('a.checkLogin i').removeClass('fa-spin');
					return false;
				}
				if (message.indexOf('Error: undefined: No such file or directory') !== -1) {
					g.sD(g.iDl, false, {
						title: err,
						message: "No such file or directory"
					});
					g.DL.cancelModalDialogIfOpen(g.iDl);
					return false;
				}
			}
			$('#ftpTree li a ins').removeClass('fa-spin');
			return false;
		}
	};
	g.nD.connection.on("base:log", function (evt, level, timestamp, message) {
		g.nodeLog(evt, level, timestamp, message);
	});
	g = $.extend(g, a);
	window.$g = g;
	/* html is ready  */
	g.AP.htmlReady(function () {
      var
         LS = g.EU.loadStyleSheet;
      LS(module, g.RS + "system/styles/legibility.css");
      LS(module, g.RS + "system/tree/styles/style.css");
      LS(module, g.RS + "system/styles/styles.css");
      LS(module, g.RS + "system/styles/arrows.less");
      LS(module, g.RS + "system/styles/osx.css");
      LS(module, g.RS + "system/styles/css/font-awesome.min.css");
	});
	/* Add the WYSIWYG plugin to the Brackets system menu */
	g.AP.appReady(function () {
		g.sP();
		g.MS.registerContextMenu('ftpTree-context-menu');
		var
			fc = g.MS.getContextMenu('ftpTree-context-menu'),
			pc = g.MS.getContextMenu('project-context-menu');
		g.CM.register(g.PREVIEW_, g.PREVIEW_ID, g.pF);
		g.CM.register(g.DOWNLOAD_, g.DOWNLOAD_ID, g.dL);
		g.CM.register(g.EDIT_, g.EDIT_ID, g.eF);
		g.CM.register(g.DELETE_, g.DELETE_ID, g.dT);
		g.CM.register(g.COPY_, g.COPY_ID, g.cF);
		g.CM.register(g.RENAME_, g.RENAME_ID, g.rF);
		g.CM.register(g.PROPERTIES_, g.PROPERTIES_ID, g.fP);
		fc.addMenuItem(g.PREVIEW_ID);
		fc.addMenuItem(g.DOWNLOAD_ID);
		fc.addMenuItem(g.EDIT_ID);
		fc.addMenuItem(g.DELETE_ID);
		fc.addMenuItem(g.COPY_ID);
		fc.addMenuItem(g.RENAME_ID);
		fc.addMenuItem(g.PROPERTIES_ID);
		g.CM.register(g.SHOW_, g.SHOW_ID, function () {
			g.tB(false);
		});
		g.MS.getMenu(g.MS.AppMenuBar.VIEW_MENU).addMenuItem(g.SHOW_ID, "Alt-B", g.MS.getMenu(g.MS.AppMenuBar.VIEW_MENU).AFTER, g.CS.VIEW_HIDE_SIDEBAR);
		g.CM.register(g.UPLOAD_, g.UPLOAD_ID, g.uL);
		pc.addMenuItem(g.UPLOAD_ID, "", g.MS.FIRST);


		/*var
		   file = require(["text!system/templates/browser-panel.ejs"],
		      function (content) {*/
		var
			browserPanelHTML = new g._EJS({
				text: g.lJ(g.RS + 'system/templates/browser-panel.ejs')
			}).render(g.gS());
		g.BP = g.WM.createBottomPanel("browser", $(browserPanelHTML), 200);
		g.wysiwyg.doc = $("#browser-iframe")[0].contentWindow.document;
		g._$ = $("#browser-iframe").contents();

		$('#status-indicators #status-indent')
			.before('<div id="showClock"><\/div>');

		$('#status-indicators .spinner')
			.after('<div id="css-path" style="border-right:' + $('#status-indicators #status-overwrite').css('border-left') + '"><\/div>');

		$('#status-info')
			.after(' ' +
				'<div id="projectInfo">' +
				'<select><optgroup label="Manage website">' +
				'<option>SITE</option>' +
				'<option> &nbsp; Settings</option>' +
				'<option> &nbsp; Local view</option>' +
				'<option> &nbsp; Remote server&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</option>' +
				'<option> &nbsp; Download all</option>' +
				'<option> &nbsp; Upload all</option>' +
				'<option> &nbsp; Help</option>' +
				'<option> &nbsp; About</option>' +
				'</optgroup></select>' +
				'<\/div>');
		// editors listener
		g.EM.on('activeEditorChange', function () {
			g.aE();
		});
		// if last file in editor was an HTML file
		g.MV.focusActivePane();
		//g.EM.focusEditor();
		//$.ajax({'url': g.RS + 'extra.php', 'type': 'POST', 'async': false, 'data': {sT: g.sT}});
		g.aE();
		if (g.eD !== null) {
			if (g.eD._codeMirror.doc.modeOption === "text/x-brackets-html" && g.cA.autoLoad === "true") {
				g.BP.show();
			}
		}
		g.eH();
		g.cL();
		g.rZ();
		$('div#main-toolbar').addClass('done');
		setTimeout(function () {
			$('#cw-first-tabbar').remove();
			$('script[data-requirecontext="drewkoch.icons"]').remove();
			$('ins.jstree-icon:not(".icon-tree")').parents('span').remove();
			/*
			$(wysiwyg.doc).find('body').html('hello');
			g.BP.show();
			*/
			/*
			$.getScript("http://www.123edit.co.uk/PHPMailer_5.2.1/examples/", function (data, textStatus, jqxhr) { });
			*/
		}, 500);
		//});
	});
});